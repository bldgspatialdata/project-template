{
  "hash": "bbebd1d1c3f5f9aeb9249851a0e03c05",
  "result": {
    "markdown": "---\ntitle: \"Example functions\"\ncode-link: true\n---\n\n\nThis document reviews the three types of functions you can write in R and illustrates a few of the basic options for [HTML documents](https://quarto.org/docs/output-formats/html-basics.html) and [websites](https://quarto.org/docs/websites/) in Quarto.\n\nThis document is a resource to support the completion of exercise 7. For more background on functions, please review the Functions chapter in [R for Data Science](https://r4ds.hadley.nz/functions).\n\n## Getting started\n\nFirst, we need to load the `{tidyverse}` and `{sf}` packages:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.3     ✔ readr     2.1.4\n✔ forcats   1.0.0     ✔ stringr   1.5.0\n✔ ggplot2   3.4.3     ✔ tibble    3.2.1\n✔ lubridate 1.9.2     ✔ tidyr     1.3.0\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors\n```\n\n\n:::\n\n```{.r .cell-code}\nlibrary(sf)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nLinking to GEOS 3.11.0, GDAL 3.5.3, PROJ 9.1.0; sf_use_s2() is TRUE\n```\n\n\n:::\n:::\n\n\nTake a look at the source for document and you can see how the code block above includes a label by including the line `#| label:` followed by the label `setup`. This is an example of a [chunk option](https://quarto.org/docs/computations/r.html#chunk-options) that allow you to override the [execution options](https://quarto.org/docs/computations/execution-options.html) set in the frontmatter (also known as the YAML) at the top of this page.\n\nExecution options for the broader Quarto website project are controlled by the `_quarto.yml` file you can find in the same directory as `examples.qmd`. Take a look at [the Quarto guide](https://quarto.org/docs/guide/) to learn more about how to change the options in `_quarto.yml` to [customize your website](https://quarto.org/docs/websites/#config-file) or [about project metadata](https://quarto.org/docs/projects/quarto-projects.html#project-metadata). \n\nThis example uses functions in the `R/example-functions.R` script contained in this project. We could use `source()` to read the script but I am going to use a function called `knitr::read_chunk()` so I can also show each part of the code in this document as we review.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nknitr::read_chunk(here::here(\"R\", \"example-functions.R\"), roxygen_comments = FALSE)\n```\n:::\n\n\nFinally, to illustrate the different types of functions, we need some data. We can use `st_read()` to create a new `sf` data frame called `nc` from the `nc.shp` shapefile that is included with the `{sf}` package:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnc <- st_read(system.file(\"shape/nc.shp\", package = \"sf\"))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nReading layer `nc' from data source \n  `/Library/Frameworks/R.framework/Versions/4.3-arm64/Resources/library/sf/shape/nc.shp' \n  using driver `ESRI Shapefile'\nSimple feature collection with 100 features and 14 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: -84.32385 ymin: 33.88199 xmax: -75.45698 ymax: 36.58965\nGeodetic CRS:  NAD27\n```\n\n\n:::\n:::\n\n\n## Control flow\n\nOur first example function is `return_one_of_two()`:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nreturn_one_of_two <- function(x, y, return_x = TRUE) {\n  if (return_x) {\n    return(x)\n  }\n\n  y\n}\n```\n:::\n\n\nBy default, the function returns the first input argument, which is a subset of `nc` with just Ashe County:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nreturn_one_of_two(\n  x = nc[1, ],\n  y = nc[2, ]\n)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nSimple feature collection with 1 feature and 14 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: -81.74107 ymin: 36.23436 xmax: -81.23989 ymax: 36.58965\nGeodetic CRS:  NAD27\n   AREA PERIMETER CNTY_ CNTY_ID NAME  FIPS FIPSNO CRESS_ID BIR74 SID74 NWBIR74\n1 0.114     1.442  1825    1825 Ashe 37009  37009        5  1091     1      10\n  BIR79 SID79 NWBIR79                       geometry\n1  1364     0      19 MULTIPOLYGON (((-81.47276 3...\n```\n\n\n:::\n:::\n\nBy setting the `return_x` argument to `FALSE` we can return the second input argument instead:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nreturn_one_of_two(\n  x = nc[1, ],\n  y = nc[2, ],\n  return_x = FALSE\n)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nSimple feature collection with 1 feature and 14 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: -81.34754 ymin: 36.36536 xmax: -80.90344 ymax: 36.57286\nGeodetic CRS:  NAD27\n   AREA PERIMETER CNTY_ CNTY_ID      NAME  FIPS FIPSNO CRESS_ID BIR74 SID74\n2 0.061     1.231  1827    1827 Alleghany 37005  37005        3   487     0\n  NWBIR74 BIR79 SID79 NWBIR79                       geometry\n2      10   542     3      12 MULTIPOLYGON (((-81.23989 3...\n```\n\n\n:::\n:::\n\nWith the added argument to override the default value, `return_one_of_two()` now returns Alleghany County.\n\n## Vector functions\n\nNext, we can review two example functions that are similar to the functions we wrote during our class session.\n\nFirst is `area_acres()`:\n\n\n::: {.cell}\n\n```{.r .cell-code}\narea_acres <- function(x, ..., digits = 2) {\n  geom_area <- sf::st_area(x, ...)\n  geom_area <- units::set_units(geom_area, \"acres\")\n  area <- as.numeric(geom_area)\n  round(area, digits = digits)\n}\n```\n:::\n\n\nThis function takes a `sfc` list as the input and returns an equal length `units` vector as the output:\n\n\n::: {.cell}\n\n```{.r .cell-code}\narea_acres(nc$geometry)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  [1] 280984.3 150960.0 351665.5 171584.1 375689.4 239074.7 152165.6 223240.0\n  [9] 291352.3 304550.0 280714.9 376660.0 352559.4 268283.7 177427.1 467930.6\n [17] 129557.7 490892.9 200681.4 154740.6 108636.4 158294.4 213286.2 315385.5\n [25] 267848.1 419498.7 274236.4 444875.2 256061.4 190375.9 351622.9 144591.9\n [33] 324067.6 302688.6 197724.0 293137.0 542239.5 291337.1 383049.2 170629.2\n [41] 164340.9 360211.0 331222.9 248496.5 244193.4 287581.2 499054.4 447349.4\n [49] 233352.7 333594.5 416385.7 263937.3 417948.7 514479.8 357566.3 233216.2\n [57] 505444.8 351104.2 174863.1 161445.6 363504.8 354873.8 383251.5 293073.8\n [65] 194843.8 312700.5 452065.5 357783.4 226892.4 324380.2 257911.2 237680.0\n [73] 193213.3 258493.6 243832.9 226782.3 148592.6 326665.8 602470.4 205980.4\n [81] 299090.8 429631.7 303636.2 407361.9 346118.5 245913.3 414642.5 512008.2\n [89] 303534.8 128304.7 441084.7 199831.0 488991.4 602918.7 312389.1 565635.1\n [97] 539074.7 605611.0 106452.2 535340.3\n```\n\n\n:::\n:::\n\n\nRemember, that we also call this type of function a \"mutate\" function because you can use it inside of a `mutate()` call:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnc |>\n  mutate(\n    area_acres = area_acres(geometry)\n  )\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nSimple feature collection with 100 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: -84.32385 ymin: 33.88199 xmax: -75.45698 ymax: 36.58965\nGeodetic CRS:  NAD27\nFirst 10 features:\n    AREA PERIMETER CNTY_ CNTY_ID        NAME  FIPS FIPSNO CRESS_ID BIR74 SID74\n1  0.114     1.442  1825    1825        Ashe 37009  37009        5  1091     1\n2  0.061     1.231  1827    1827   Alleghany 37005  37005        3   487     0\n3  0.143     1.630  1828    1828       Surry 37171  37171       86  3188     5\n4  0.070     2.968  1831    1831   Currituck 37053  37053       27   508     1\n5  0.153     2.206  1832    1832 Northampton 37131  37131       66  1421     9\n6  0.097     1.670  1833    1833    Hertford 37091  37091       46  1452     7\n7  0.062     1.547  1834    1834      Camden 37029  37029       15   286     0\n8  0.091     1.284  1835    1835       Gates 37073  37073       37   420     0\n9  0.118     1.421  1836    1836      Warren 37185  37185       93   968     4\n10 0.124     1.428  1837    1837      Stokes 37169  37169       85  1612     1\n   NWBIR74 BIR79 SID79 NWBIR79                       geometry area_acres\n1       10  1364     0      19 MULTIPOLYGON (((-81.47276 3...   280984.3\n2       10   542     3      12 MULTIPOLYGON (((-81.23989 3...   150960.0\n3      208  3616     6     260 MULTIPOLYGON (((-80.45634 3...   351665.5\n4      123   830     2     145 MULTIPOLYGON (((-76.00897 3...   171584.1\n5     1066  1606     3    1197 MULTIPOLYGON (((-77.21767 3...   375689.4\n6      954  1838     5    1237 MULTIPOLYGON (((-76.74506 3...   239074.7\n7      115   350     2     139 MULTIPOLYGON (((-76.00897 3...   152165.6\n8      254   594     2     371 MULTIPOLYGON (((-76.56251 3...   223240.0\n9      748  1190     2     844 MULTIPOLYGON (((-78.30876 3...   291352.3\n10     160  2038     5     176 MULTIPOLYGON (((-80.02567 3...   304550.0\n```\n\n\n:::\n:::\n\n\nCompare `area_acres()` with `mean_area()` and you will find two important changes in the code:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmean_area <- function(x, ..., value = \"acres\", na.rm = FALSE, digits = 2) {\n  geom_area <- sf::st_area(x, ...)\n  geom_area <- units::set_units(geom_area, value = value, mode = \"standard\")\n  area <- as.numeric(geom_area)\n  round(mean(area, na.rm = na.rm), digits = digits)\n}\n```\n:::\n\n\nFirst, `mean_area()` is a summary function that we can use with a vector or inside of a `summarise()` function:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnc |>\n  summarise(\n    mean_sq_mi = mean_area(geometry, value = \"mile^2\")\n  )\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nSimple feature collection with 1 feature and 1 field\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: -84.32385 ymin: 33.88199 xmax: -75.45698 ymax: 36.58965\nGeodetic CRS:  NAD27\n  mean_sq_mi                       geometry\n1     490.45 MULTIPOLYGON (((-75.97629 3...\n```\n\n\n:::\n:::\n\n\nWe also added the `value` parameter which is passed to `units::set_units()` and allows us to change the units returned by the function. Exposing parameters from the underlying functions can provide you with greater flexibility when you reuse the function in the future.\n\n## Data frame functions\n\nMany of the functions from `{dplyr}` that we have discussed in class (including `select()`, `mutate()`, and `filter()`) are data frame functions that take a data frame and return a data frame.\n\n`select_starts_with()` wraps the `dplyr::select()` function:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nselect_starts_with <- function(data, match, ...) {\n  dplyr::select(data, dplyr::starts_with(match, ...))\n}\n```\n:::\n\n\nHere are the results: \n\n\n::: {.cell}\n\n```{.r .cell-code}\nselect_starts_with(nc, c(\"NAME\", \"BIR\"))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nSimple feature collection with 100 features and 3 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: -84.32385 ymin: 33.88199 xmax: -75.45698 ymax: 36.58965\nGeodetic CRS:  NAD27\nFirst 10 features:\n          NAME BIR74 BIR79                       geometry\n1         Ashe  1091  1364 MULTIPOLYGON (((-81.47276 3...\n2    Alleghany   487   542 MULTIPOLYGON (((-81.23989 3...\n3        Surry  3188  3616 MULTIPOLYGON (((-80.45634 3...\n4    Currituck   508   830 MULTIPOLYGON (((-76.00897 3...\n5  Northampton  1421  1606 MULTIPOLYGON (((-77.21767 3...\n6     Hertford  1452  1838 MULTIPOLYGON (((-76.74506 3...\n7       Camden   286   350 MULTIPOLYGON (((-76.00897 3...\n8        Gates   420   594 MULTIPOLYGON (((-76.56251 3...\n9       Warren   968  1190 MULTIPOLYGON (((-78.30876 3...\n10      Stokes  1612  2038 MULTIPOLYGON (((-80.02567 3...\n```\n\n\n:::\n:::\n\n\nData frame functions may just be a wrapper for a vector function. For example, take a look at `bind_sf_area_acres()` which combines `mutate()` and the `area_acres()` function we looked at in the prior section:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbind_sf_area_acres <- function(data, ...) {\n  stopifnot(inherits(data, \"sf\"))\n\n  sf_column <- attributes(data)$sf_column\n\n  dplyr::mutate(\n    data,\n    area = area_acres(data[[sf_column]], ...),\n    .before = all_of(sf_column)\n  )\n}\n```\n:::\n\n\nNote that this function uses an input check, `stopifnot()`, to make sure the input data is a `sf` class object.\n\nHere is the function in action:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnc |>\n  select_starts_with(\"NAME\") |>\n  bind_sf_area_acres()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nSimple feature collection with 100 features and 2 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: -84.32385 ymin: 33.88199 xmax: -75.45698 ymax: 36.58965\nGeodetic CRS:  NAD27\nFirst 10 features:\n          NAME     area                       geometry\n1         Ashe 280984.3 MULTIPOLYGON (((-81.47276 3...\n2    Alleghany 150960.0 MULTIPOLYGON (((-81.23989 3...\n3        Surry 351665.5 MULTIPOLYGON (((-80.45634 3...\n4    Currituck 171584.1 MULTIPOLYGON (((-76.00897 3...\n5  Northampton 375689.4 MULTIPOLYGON (((-77.21767 3...\n6     Hertford 239074.7 MULTIPOLYGON (((-76.74506 3...\n7       Camden 152165.6 MULTIPOLYGON (((-76.00897 3...\n8        Gates 223240.0 MULTIPOLYGON (((-76.56251 3...\n9       Warren 291352.3 MULTIPOLYGON (((-78.30876 3...\n10      Stokes 304550.0 MULTIPOLYGON (((-80.02567 3...\n```\n\n\n:::\n:::\n\n\n## Plot functions\n\nThe last example is a plotting function that wraps both `ggplot()` and `geom_sf()`.\n\nHere is the code:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmake_sf_plot <- function(data, mapping = aes(), ...) {\n  ggplot2::ggplot(data = data, mapping = mapping) +\n    ggplot2::geom_sf(...)\n}\n```\n:::\n\n\nHere are the results:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmake_sf_plot(\n  data = nc,\n  mapping = aes(fill = BIR74),\n  color = \"white\",\n  linewidth = 0.1\n)\n```\n\n::: {.cell-output-display}\n![](example-functions_files/figure-html/unnamed-chunk-17-1.png){width=672}\n:::\n:::\n\n\nThis function uses a special operator `...` (called dots) that can *only* be used inside a function. Dots are a way to pass any number of additional arguments from one function to another. Read more about the `...` parameters in the Advanced R [chapter on functions](https://adv-r.hadley.nz/functions.html#fun-dot-dot-dot).\n\nIn this example, `data` and `mapping` are passed to `ggplot()` and any additional parameters are passed to `geom_sf()`.\n\nPlotting functions are helpful avoid duplication in your mapping code. Since they return a `ggplot` object, you can customize the results by combining it with other functions:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmake_sf_plot(\n  data = nc,\n  mapping = aes(fill = BIR74),\n  color = \"white\",\n  linewidth = 0.1\n) +\n  theme_minimal() +\n  ggtitle(\"Births by county, 1974-78\")\n```\n\n::: {.cell-output-display}\n![](example-functions_files/figure-html/unnamed-chunk-18-1.png){width=672}\n:::\n:::\n",
    "supporting": [
      "example-functions_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}